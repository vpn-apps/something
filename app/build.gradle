import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
}

def calcVersionCode() {
    def versionCodeFile = file("versionCode.txt")
    def versionCode = versionCodeFile.text.trim().toInteger()
    return versionCode + abiId.toInteger()
}

android {
    namespace = "io.github.saeeddev94.xray"
    compileSdk = 34

    defaultConfig {
        applicationId = "io.github.saeeddev94.xray"
        minSdk = 26
        targetSdk = 35
        versionCode = calcVersionCode()
        versionName = "8.1.0"

        vectorDrawables.useSupportLibrary = true
        vectorDrawables.generatedDensities = []
    }

    aaptOptions {
        cruncherEnabled = false
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    externalNativeBuild {
        ndkVersion = "27.1.12297006"
        ndkBuild.path = "src/main/jni/Android.mk"
    }

    packagingOptions {
        doNotStrip("**/*.so")
    }

    splits {
        abi {
            enable = true
            universalApk = false
            reset()
            //noinspection ChromeOsAbiSupport
            include abiTarget.split(',')
        }
    }
}

project.afterEvaluate {
    tasks.compileReleaseArtProfile.doLast {
        outputs.files.each { file ->
            if (file.toString().endsWith(".profm")) {
                println("Sorting ${file} ...")
                def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                def profile = ArtProfileKt.ArtProfile(file)
                def keys = new ArrayList(profile.profileData.keySet())
                def sortedData = new LinkedHashMap()
                Collections.sort keys, new DexFile.Companion()
                keys.each { key -> sortedData[key] = profile.profileData[key] }
                new FileOutputStream(file).with {
                    write(version.magicBytes$profgen)
                    write(version.versionBytes$profgen)
                    version.write$profgen(it, sortedData, "")
                }
            }
        }
    }
}

dependencies {
    implementation(fileTree(dir: "libs", include: ["*.aar", "*.jar"]))
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:2.0.21"))
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.7.0")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("androidx.room:room-runtime:2.6.1")
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("com.blacksquircle.ui:editorkit:2.9.0")
    implementation("com.blacksquircle.ui:language-json:2.9.0")
    implementation("com.google.android.material:material:1.12.0")
}
